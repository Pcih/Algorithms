"""
Сортировка пирамидой использует бинарное сортирующее дерево. Сортирующее дерево — это такое дерево, у которого
выполнены условия:

Каждый лист имеет глубину либо d d, либо d − 1 d-1, d d — максимальная глубина дерева.
Значение в любой вершине не меньше (другой вариант — не больше) значения её потомков.

Достоинства
Имеет доказанную оценку худшего случая O(n*log n).
Сортирует на месте, то есть требует всего O (1) дополнительной памяти
(если дерево организовывать так, как показано выше).

Недостатки
Неустойчив — для обеспечения устойчивости нужно расширять ключ.
На почти отсортированных массивах работает столь же долго, как и на хаотических данных.
На одном шаге выборку приходится делать хаотично по всей длине массива —
поэтому алгоритм плохо сочетается с кэшированием и подкачкой памяти[1].
Методу требуется доступ к произвольному элементу структуры; не работает
на связанных списках и других структурах памяти последовательного доступа.
Не распараллеливается.
"""

# Процедура для преобразования в двоичную кучу поддерева с корневым узлом idx, что является индексом в array[].
# length - размер кучи


def heapify(array: list, length: int, idx: int):
    largest = idx     # Initialize largest as root
    left = 2 * idx + 1   # left = 2*i + 1
    right = 2 * idx + 2   # right = 2*i + 2

# Проверяем существует ли левый дочерний элемент больший, чем корень
    if left < length and array[idx] < array[left]:
        largest = left

    # Проверяем существует ли правый дочерний элемент больший, чем корень
    if right < length and array[largest] < array[right]:
        largest = right

    # Заменяем корень, если нужно
    if largest != idx:
        array[idx], array[largest] = array[largest], array[idx]  # свап

        # Применяем heapify к корню.
        heapify(array, left, largest)


# Основная функция для сортировки массива заданного размера
def heap_sort(arr):
    n = len(arr)

    # Построение max-heap.
    for i in range(n, -1, -1):
        heapify(arr, n, i)

    # Один за другим извлекаем элементы
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # свап
        heapify(arr, i, 0)


# Управляющий код для тестирования
new_array = [12, 11, 13, 5, 6, 7]
heap_sort(new_array)
n = len(new_array)
print("Sorted array is")
for i in range(n):
    print(f'{new_array[i]}'),

"""
Итоговая сложность по времени: O(n log n) + O(n log n) = O(n log n).
При этом у пирамидальной сортировки нет ни вырожденных ни лучших случаев. 
Любой массив будет обработан на приличной скорости, но при этом не будет ни деградации ни рекордов

Доп матерялы взяты с 
https://ru.wikipedia.org/wiki/%D0%9F%D0%B8%D1%80%D0%B0%D0%BC%D0%B8%D0%B4%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0
https://habr.com/
"""
